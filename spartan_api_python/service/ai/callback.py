"""Callback handlers used in the app."""
from typing import Any, Dict, List

from langchain.callbacks.base import AsyncCallbackHandler
from starlette.websockets import WebSocket

from spartan_api_python.api.router.bot.schema import BotChatResponse


class StreamingLLMCallbackHandler(AsyncCallbackHandler):
    """Callback handler for streaming LLM responses."""

    def __init__(self, websocket: WebSocket):
        """
        Init StreamingLLMCallbackHandler class.

        :param websocket: Websocket object for send output response
        """
        self.websocket = websocket

    async def on_llm_new_token(self, token: str, **kwargs: Any) -> None:
        """
        Called when a new token is generated by the Language Learning Model (LLM).

        This method is invoked when a new token is generated by the LLM. It receives
        the generated token as a string and additional keyword arguments.

        :param token: The newly generated token.
        :type token: str
        :param kwargs: Additional keyword arguments passed to the method.
        :type kwargs: Any
        """
        resp = BotChatResponse(sender="bot", message=token, type="stream")
        await self.websocket.send_json(resp.dict(by_alias=True))


class QuestionGenCallbackHandler(AsyncCallbackHandler):
    """Callback handler for question generation."""

    def __init__(self, websocket: WebSocket):
        self.websocket = websocket

    async def on_llm_start(
        self,
        serialized: Dict[str, Any],
        prompts: List[str],
        **kwargs: Any,
    ) -> None:
        """
        Called when the Language Learning Model (LLM) starts running.

        This method is invoked when the LLM starts running. It receives the
        serialized state of the LLM, a list of prompts, and additional keyword
        arguments.

        :param serialized: A dictionary containing the serialized state of the LLM.
        :type serialized: Dict[str, Any]
        :param prompts: A list of prompts used by the LLM.
        :type prompts: List[str]
        :param kwargs: Additional keyword arguments passed to the method.
        :type prompts: Any
        """
        resp = BotChatResponse(
            sender="bot",
            message="Synthesizing question...",
            type="info",
        )
        await self.websocket.send_json(resp.dict(by_alias=True))
